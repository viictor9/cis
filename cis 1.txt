Practical 1 
Aim: To Implement Security Goals.

SERVER.py
from Crypto.Cipher import AES
import socket
import hashlib

print(&quot;Enter A for confidentiality&quot;)
print(&quot;Enter B for integrity&quot;)
print(&quot;Enter C for Availability&quot;)

opt=input(&quot;Select an options:&quot;)
import hashlib

def get_hash(message,algor):
if algor == &quot;MD5&quot;:
return hashlib.md5(message.encode()).hexdigest()
elif algor == &quot;SHA1&quot;:
return hashlib.sha1(message.encode()).hexdigest()
elif algor == &quot;SHA256&quot;:
return hashlib.sha256(message.encode()).hexdigest()
elif algor == &quot;SHA512&quot;:
return hashlib.sha512(message.encode()).hexdigest()
else:
return &quot;Invalid hashing algorthims&quot;

if opt == &quot;A&quot;:
key =b&#39;wwydgsdjhdjsdjhd&#39;
cipher = AES.new(key, AES.MODE_EAX)
data = input(&quot;Enter plane text:&quot;).encode()
nonce =cipher.nonce
ciphertext =cipher.encrypt(data)
print(&quot;Cipher text:&quot;,ciphertext)
cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
plaintext =cipher.decrypt(ciphertext)
print(&quot;Plain text:&quot;, plaintext)

elif opt == &quot;B&quot;:
message=input(&quot;ENTER TEXT YOU WANT HASH:&quot;)
print(&quot;Select 1 for MD5&quot;)
print(&quot;Select 2 for SHA1&quot;)
print(&quot;Select 3 for SHA256&quot;)
print(&quot;Select 4 for SHA512&quot;)

select=input(&quot;ENTER THE OPTIONS YOU WANT TO HASH USING WHICH HASHING
ALGORITHMS:&quot;)

if select == &quot;1&quot;:
algor =&quot;MD5&quot;
elif select == &quot;2&quot;:
algor =&quot;SHA1&quot;
elif select == &quot;3&quot;:
algor =&quot;SHA256&quot;
elif select == &quot;4&quot;:
algor =&quot;SHA512&quot;
else:
print(&quot;Invalid selection,Please enter valid options&quot;)

#hashed_msgg=get_hash(message,algor)
print(&quot;The message hashed using&quot;,algor)
print(get_hash(message,algor))

elif opt == &quot;C&quot;:
serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
serverSocket.bind((&quot;127.0.0.1&quot;,9090));
serverSocket.listen();
while(True):
(clientConnected, clientAddress) = serverSocket.accept();
print(&quot;Accepted a connection request from %s:%s&quot;%(clientAddress[0], clientAddress[1]));
dataFromClient = clientConnected.recv(1024)
print(dataFromClient.decode());
clientConnected.send(&quot;Hello Client!&quot;.encode());

CLIENT.py:
import socket

clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
clientSocket.connect((&quot;127.0.0.1&quot;,9090));
data = &quot;Hello Server!&quot;;
clientSocket.send(data.encode());
dataFromServer = clientSocket.recv(1024);
print(dataFromServer.decode());
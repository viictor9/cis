PRACTICAL NO:3

Aim:- Security Practices that include:-
A) Error Handling/Error Log
B) Creating Process Logs
C)Data Backup &amp; Recovery
import logging

def error_logging():
    f = open("C:\\errorLogs.txt", "a")

    def error_NameError():
        try:
            print("value of a", a)
        except NameError as namelog:
            logging.error("Error occurred: ValueError has occurred...")
            print("NameError Logged")
            f.write("1. Name Error\n" + str(namelog))

    def error_ModuleNotFoundError():
        try:
            import abcmodule
        except ModuleNotFoundError as modulelog:
            logging.error("Error occurred: ModuleNotFoundError has occurred...")
            print("ModuleError Logged")
            f.write("\n\n2. Module Error\n" + str(modulelog))

    def error_IndexError(): 
        var_list = [3, 1, 2]
        try:
            print(var_list[5])
        except IndexError as indexlog:
            logging.error("Error occurred: IndexError has occurred, invalid list indexing...")
            print("IndexError Logged")
            f.write("\n\n3. Index Error\n" + str(indexlog))

    def error_ZeroDivisionError():
        try:
            C = 3 / 0
        except ZeroDivisionError as zerodivlog:
            logging.error("Error occurred: ZeroDivisionError has occurred...")
            print("ZeroDivisionError Logged")
            f.write("\n\n4. Zero Division Error\n" + str(zerodivlog))

    def error_KeyError():
        var_dict = {1: "A word", 2: 'Another word'}
        try:
            var_dict[3]
        except KeyError as keylog:
            logging.error("Error occurred: KeyError has occurred...")
            print("KeyError Logged")
            f.write("\n\n5. Key Error\n" + str(keylog))

    def error_TypeError():
        try:
            d = 3 + '3'
        except TypeError as typelog:
            logging.error("Error occurred: TypeError has occurred...")
            print("TypeError Logged")
            f.write("\n\n6. Type Error\n" + str(typelog))

    def error_KeyboardInterrupt():
        try:
            while True:
                print(3)
        except KeyboardInterrupt as keyboardinterruptlog:
            logging.error("Error occurred: KeyboardInterrupt has occurred...")
            print("KeyboardInterrupt Logged")
            f.write("\n\n7. Keyboard Interrupt Error\n" + str(keyboardinterruptlog))

    def critical_error():
        list_size = 536870912
        if list_size > 100:
            logging.critical("Critical Error occurred: Huge resources requested, cannot provide so much memory for list...")
            print("critical_error Logged")
            f.write("\n\n8. Critical Error")
        else:
            var_list = []
            for i in range(list_size):
                var_list.append(0)

    logging.basicConfig(
        filename="LogFile.log",
        level=logging.DEBUG,
        filemode='w',
        format='Time: %(asctime)s - Name: %(name)s - FilePath: - %(pathname)s - FunctionName: %(funcName)s - LevelName:%(levelname)s - Message:%(message)s - Line Number: -%(lineno)d - ProcessID:%(process)d - ThreadID: %(thread)d'
    )
    logging.debug("Executing code and logging errors if any...")
    logging.warning("Error expected in multiple functions to be tested")
    logging.info("Program has started...")

    error_NameError()
    error_ModuleNotFoundError()
    error_IndexError()
    error_ZeroDivisionError()
    error_KeyError()
    error_TypeError()
    error_KeyboardInterrupt()
    critical_error()

    f.close()

error_logging()



2.CODE:-
package com.mycompany.Processlog;

import java.io.FileWriter;
import java.io.IOException;

public class Processlog {
    public static void main(String[] args) {
        try {
            String cmd = "WMIC /OUTPUT:E:\\Viraj_workspace\\CIS\\list.html get name,processid,creationdate /format:hform";
            
            FileWriter fos = new FileWriter("E:\\Viraj_workspace\\CIS\\mycmd.bat");
            System.out.println("File created");
            fos.write(cmd);
            fos.close();
            
            Runtime rt = Runtime.getRuntime();
            rt.exec("cmd.exe /c start E:\\Viraj_workspace\\CIS\\mycmd.bat");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}




3.CODE:-
? Backup Code:-

import os

def backup(path, user, dbname, backuppath, filename):
    cmd = "mysqldump -u " + user + " -p " + dbname + " > " + backuppath + filename
    os.chdir(path)
    os.system(cmd)
    print("Database Backup Successful!")

path = input("Enter the Mysql Path: ")
user = input("Enter the Username: ")
dbname = input("Enter the Database name: ")
backuppath = input("Enter the Backup Path: ")
filename = input("Enter the Backup Name: ")
backup(path, user, dbname, backuppath, filename)




Restore CODE:-
import os

def restore(path, user, dbname, backuppath, filename):
    cmd = "mysql -u " + user + " -p " + dbname + " < " + backuppath + filename
    os.chdir(path)
    os.system(cmd)
    print("Database Restore Completed!")

path = input("Enter mysql path: ")
user = input("Enter Username: ")
dbname = input("Enter Database Name: ")
backuppath = input("Enter Backup Path: ")
filename = input("Enter Filename: ")
backup(path, user, dbname, backuppath, filename)
